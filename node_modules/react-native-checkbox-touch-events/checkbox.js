'use strict';

import React, {
    PropTypes,
    Component,
} from 'react';
import {
    StyleSheet,
    Image,
    Text,
    View,
    TouchableHighlight
} from 'react-native';

export default class Checkbox extends Component {
    static propTypes = {
        label: PropTypes.string,
        uncheckedLabel: PropTypes.string,
        labelStyle: Text.propTypes.style,
        uncheckedLabelStyle: Text.propTypes.style,
        checkboxStyle: Image.propTypes.style,
        containerStyle: View.propTypes.style,
        checked: PropTypes.bool,
        checkedImage: Image.propTypes.source,
        uncheckedImage: Image.propTypes.source,
        underlayColor: TouchableHighlight.propTypes.underlayColor,
        onChange: PropTypes.func,
        labelBefore: PropTypes.bool,
        activeOpacity: TouchableHighlight.propTypes.activeOpacity,
    };

    static defaultProps = {
        label: '',
        uncheckedLabel: '',
        labelBefore: false,
        checked: false,
        checkedImage: require('./cb_enabled.png'),
        uncheckedImage: require('./cb_disabled.png'),
        underlayColor: 'white',
        activeOpacity: 0.8,
    };

    onChange() {
        if (this.props.onChange) {
            this.props.onChange(!this.props.checked);
        }
    }

    render() {
        const checked = this.props.checked;
        const source = checked ? this.props.checkedImage : this.props.uncheckedImage;
        const label = checked ? this.props.label : this.props.uncheckedLabel || this.props.label;
        const labelStyle = checked ? this.props.labelStyle : this.props.uncheckedLabelStyle || this.props.labelStyle;

        let container = (
            <View style={this.props.containerStyle || styles.container}>
                <Image
                    style={this.props.checkboxStyle || styles.checkbox}
                    source={source}/>
                <View style={styles.labelContainer}>
                    <Text style={[styles.label, labelStyle]}>{label}</Text>
                </View>
            </View>
        );

        if (this.props.labelBefore) {
            container = (
                <View style={this.props.containerStyle || styles.container}>
                    <View style={styles.labelContainer}>
                        <Text style={[styles.label, this.props.labelStyle]}>{this.props.label}</Text>
                    </View>
                    <Image
                        style={this.props.checkboxStyle || styles.checkbox}
                        source={source}/>
                </View>
            );
        }

        var context = this, pressStart = 0;
        const pressTimeout = 200;

        function pressIn() {
            pressStart = (new Date()).getTime();
        }

        function pressOut() {
            var pressEnd = (new Date()).getTime();
            if (pressEnd - pressStart > pressTimeout) return;

            context.onChange.bind(context)();
        }

        return (
            <TouchableHighlight delayPressIn={0} onPressIn={(...args) => {this.props.onPressIn && this.props.onPressIn(args); pressIn()}} onPressOut={(...args) => {this.props.onPressOut && this.props.onPressOut(args); pressOut()}} activeOpacity={this.props.activeOpacity} underlayColor={this.props.underlayColor}>
                {container}
            </TouchableHighlight>
        )
    }
}

const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 5,
    },
    checkbox: {
        width: 26,
        height: 26
    },
    labelContainer: {
        marginLeft: 10,
        marginRight: 10
    },
    label: {
        fontSize: 15,
        color: 'grey'
    }
});
